#include <iostream>
#include <string>
#include <cmath>
#include <map>
using namespace std;

/*1. Даны целые положительные числа A и B (A < B). Вывести все целые числа от 
A до B включительно; при этом каждое число должно выводиться столько раз, 
каково его значение (например, число 3 выводится 3 раза).*/
void f1()//well-done
{
	int A, B;
	cout << "write A and B(A must be smaller, then B)" << endl;
	cin >> A >> B;
	if(A > B)
	{
		cout << "err" << endl;
		return;
	}
	
	for(int i = A; i <= B; i++)
	{
		for(int j = 0; j < i; j++)
		{
			cout << i << endl;
		}
	}
}

/*2. Даны положительные числа A и B (A > B). На отрезке длины A размещено 
максимально возможное количество отрезков длины B (без наложений). Не 
используя операции умножения и деления, найти длину незанятой части 
отрезка A.*/
void f2()//wip
{
}

/*3. 3. Дано целое число N (> 1). Вывести наименьшее из целых чисел K, 
для которых сумма 1 + 2 + . . . + K будет больше или равна N, и саму 
эту сумму.*/
void f3()//wip
{
}

/*4. Начальный вклад в банке равен 1000 руб. Через каждый месяц размер 
вклада увеличивается на P процентов от имеющейся суммы (P — 
вещественное число, 0 < P < 25). По данному P определить, через 
сколько месяцев размер вклада превысит 1100 руб., и вывести 
найденное количество месяцев K (целое число) и итоговый размер 
вклада S (вещественное число).*/
void f4()//wip
{
}

/*5. Даны целые положительные числа A и B. Найти их наибольший 
общий делитель (НОД), используя алгоритм Евклида*/
void f5()//wip
{
}

/*6. Дано целое число N (> 1), являющееся числом Фибоначчи: 
N = FK.
Найти целое число K — порядковый номер числа Фибоначчи N.*/
void f6()//wip
{
}

int main()
{
	setlocale(LC_ALL, "russian");
	
	short r = 1;
	int i;
	
	while(i <= 6)
	{
		cout << "write number of quest" << endl;
		cin >> r;
		switch(r)
		{
			default:
				//break;
				return 0;
				break;
			case 1:
				f1();
				continue;
				i++;
			case 2:
				f2();
				continue;
				i++;
			case 3:
				f3();
				continue;
				i++;
			case 4:
				f4();
				continue;
				i++;
			case 5:
				f5();
				continue;
				i++;
			case 6:
				f6();
				continue;
				i++;
		}
	}
	system("pause");
}